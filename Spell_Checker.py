'''
Joey Ma

This program simulates the autocorrect feature when typing on our phones.
A useful spell checker goes beyond just checking to see if a word is in a dictionary,
but will suggest alternative spellings for you to choose from.
'''

#Global constant
ALPHABET = 'abcdefghijklmnopqrstuvwxyz'

# Reads the dictionary of words from the supplied filename as a set.  It is assumed that
# the file consists of one word per line, only contains letters (and line terminators),
# and all words are in lower case.  If the file cannot be found then the function
# returns an empty set.
def readDictionary(filename) :
    try:
        with open (filename, "r") as myfile:
            data = myfile.readlines()
    except:
        print("File not found or cannot be opened")
        return []
    lis = []
    for word in data:
        lis.append(word.rstrip())
    return lis

# Generates a list of candidate words by generating each possiblity from the supplied
# word, target, that is missing one letter.  The number of words returned will be
# len(target).
def removeLetterCandidates(target) :
    lis = []
    for i in range(len(target)):
        lis.append(target[:i] + target[i+1:])
    return lis

# Generates a list of candidate words by generating each possible combination of
# swapped ajacent letters in the supplied target word.  The number of words
# returned will be len(target) - 1
def swapLetterCandidates(target) :
    lis = []
    for i in range(len(target) - 1):
        lis.append(target[:i] + target[i+1] + target[i] + target[i+2:])
    return lis

# Generates a list of candidate words by putting together each possible single letter
# substitution in the supplied target word.  The number of words generated will be
# 26 * len(target)
def replaceLetterCandidates(target) :
    lis = []
    for i in range(len(ALPHABET)):
        for k in range(len(target)):
            lis.append(target[:k] + ALPHABET[i] + target[k+1:])
    return lis

# Generates a list of candidate words by putting together each possible single letter
# insertion in the supplied target word.  The number of words generated will be
# 26 * (len(target) + 1)
def insertLetterCandidates(target) :
    lis = []
    for i in range(len(ALPHABET)):
        for k in range(len(target) + 1):
            lis.append(target[:k] + ALPHABET[i] + target[k:])
    return lis

# Invokes all four of the word candidate generators from above and combines the
# lists into a set, which will eliminate any duplicate words.  The maximum number
# of words will be 54 * len(target) + 25
def getOneEditWords(target) :
    allSets = set()
    allSets.update(set(removeLetterCandidates(target)))
    allSets.update(set(swapLetterCandidates(target)))
    allSets.update(set(replaceLetterCandidates(target)))
    allSets.update(set(insertLetterCandidates(target)))
    return allSets

# This function returns the set of words generated by considering two letter edits.
# It accepts the list of one letter edit words as an argument and then feeds each
# word from this list back into the one letter edit candidate generator.  The list
# is converted to a set so that duplicates can be eliminated.  The maximum number of
# words would be the (54 * len(target) + 25) ** 2
def getTwoEditWords(oneEditWords) :
    allSets = set()
    for word in oneEditWords:
        allSets.update(getOneEditWords(word))
    return allSets

# Obtains both the high and low probablility word corrections that exist in the
# dictionary.
def getPossibleWords(targetWord, dictionary) :
    edit1 = getOneEditWords(targetWord)
    edit2 = getTwoEditWords(edit1)
    lis1 = edit1.intersection(dictionary)
    lis2 = edit2.intersection(dictionary)
    #Sort using BIF
    return sorted(lis1), sorted(lis2)

# main first loads the dictionary and then uses a loop to prompt the user for words to
# check, displaying the high and low probability matches for each supplied word.  The
# user presses <enter> only to end the loop.
def main() :
    dictionary = readDictionary("corncob_lowercase.txt")
    if len(dictionary) == 0 :
        print("Dictionary not available! Exiting program.")
        return
    print("Supply words to test the spell checker.\nPress <enter> " + \
          "when you are done.")
    targetWord = "walk"

    #Prompts user for input
    while len(targetWord) > 0 :
        targetWord = input("A word to check: ")
        if len(targetWord) > 0 and not targetWord.isalpha() :
            print("Use only letters in your word.")
        elif len(targetWord) > 0 :
            targetWord = targetWord.lower()
            oneEditInDictionary, twoEditInDictionary = getPossibleWords(targetWord, dictionary)
            if targetWord in oneEditInDictionary :
                print("Word is spelled correctly! Similar words obtained:")
            print("Higher probability:")
            if len(oneEditInDictionary) > 0 :
                print(list(oneEditInDictionary))
            else :
                print("No words found.")
            print("Lower probability:")
            if len(twoEditInDictionary) > 0 :
                print(twoEditInDictionary)
            else :
                print("No words found.")
    print("All done!")

main()
